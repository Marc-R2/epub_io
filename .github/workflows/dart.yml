# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Dart

on: [ push, pull_request ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      # - name: Auth GitHub
      #  run: git config --global url."https://${{ secrets.MANU_GITHUB_TOKEN }}@github.com/".insteadOf "https://github.com/"

      # Note: This workflow uses the latest stable version of the Dart SDK.
      # You can specify other versions if desired, see documentation here:
      # https://github.com/dart-lang/setup-dart/blob/main/README.md
      # - uses: dart-lang/setup-dart@v1
      - uses: dart-lang/setup-dart@v1.3
        with:
          sdk: "3.4.3"

      # Try to restore downloaded Epub-Files for tests
      - name: Restore cached Epub-Downloads for tests
        id: restore-epub-downloads
        uses: actions/cache/restore@v4
        with:
          path: |
            test/res/**
          key: ${{ runner.os }}-epub-downloads

      - name: Install dependencies
        run: dart pub get

      - name: Build Runner
        run: dart pub run build_runner build --delete-conflicting-outputs

      # Consider passing '--fatal-infos' for slightly stricter analysis.
      - name: Analyze project source
        run: dart analyze

      - name: Run tests
        run: dart pub run test
        shell: bash

      # Cache downloaded Epub-Files for tests
      - name: Cache downloaded Epub-Files for tests
        id: cache-epub-downloads
        uses: actions/cache/save@v4
        with:
          path: |
            test/res/**
          key: ${{ runner.os }}-epub-downloads

      - name: Coverage information
        run: |
          dart pub global activate coverage
          dart pub global run coverage:test_with_coverage --branch-coverage --function-coverage

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4.0.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: unittests
          files: ./coverage/lcov.info
          fail_ci_if_error: true

      # Temporarily remove .gitignore to include generated files
      - name: Override .gitignore for generated files
        run: |
          mv lib/.gitignore lib/.gitignore.backup

      - name: Prepare directory for generated files
        run: |
          mkdir -p ../tmp/repo
          rsync -av --exclude '.git' . ../tmp/repo/
          git clean -fdx

      - name: Checkout generated-files branch
        run: |
          git fetch origin
          git checkout -B generated-files origin/generated-files || git checkout --orphan generated-files

      - name: Remove all files in generated-files branch
        run: |
          git rm -rf . || true
          git clean -fdx

      - name: Add new current files
        run: |
          cp -a ../tmp/repo/. ./ || echo "No files to copy"

      - name: Set up Git
        # Take the user from the original commit and wrap it with "GitHub Actions Bot extends <user>"
        # Match the email to the user's email
        run: |
          git config user.name "GitHub Actions Bot extends $(git log -1 $GITHUB_SHA --pretty=format:'%an')"
          git config user.email "$(git log -1 $GITHUB_SHA --pretty=format:'%ae')"

      - name: Check Git status
        run: |
          git status
          git log -n 1
          git branch -a

      - name: Commit and push generated files
        if: success() && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
        run: |
          git add .
          git status
          git diff --cached --exit-code || git commit -m "Update generated files"
          git push origin generated-files --verbose

      - name: Handle merge conflicts
        if: failure()
        run: |
          echo "Merge conflicts detected. Please resolve manually."
          exit 1
